{"version":3,"sources":["./src/app/auth/auth.service.ts"],"names":[],"mappings":"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","file":"auth-login-login-module-es5.js","sourcesContent":["// import { Injectable } from '@angular/core';\n// import { JwtHelperService } from \"@auth0/angular-jwt\";\n// import { HttpClient } from '@angular/common/http';\n// import { BehaviorSubject } from 'rxjs';\n// import { environment } from 'src/environments/environment';\n// import { Router } from '@angular/router';\n\n\n\n// const helper = new JwtHelperService();\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n//   redirectUrl: string;\n\n//   private userData = new BehaviorSubject(null);\n//   constructor(private http: HttpClient, private router: Router) {\n    \n//   }\n\n\n//   login(credentials): Promise<any> {\n//     return new Promise((resolve, reject) => {\n//       //เรียก Api ได้ token\n//       let token = \"ddddd\"\n      \n//       // storage token in local storage\n//       window.localStorage.setItem(`token@${environment.appName}`, token);\n      \n//       // decode token to user data\n//       //let decoded = helper.decodeToken(token);\n//       let decoded = {};\n      \n//       // emit user Data to subscriber\n//       this.userData.next(decoded);\n      \n//       // resolve user data to login page\n//       resolve(decoded);\n//     })\n\n//   }\n\n//   getUser() {\n//     return this.userData.getValue();\n//   }\n\n//   logout() {\n//     window.localStorage.remove(`token@${environment.appName}`).then(() => {\n//       this.router.navigateByUrl('/');\n//       this.userData.next(null);\n//     });\n//   }\n\n// }\n\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { User } from './models/user';\nimport { Storage } from '@ionic/storage'\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n  isLoggedIn = false;\n  token:any;\n  AUTH_SERVER_ADDRESS:  string  =  environment.apiUrl; // Your Node Address\n\n  constructor(\n    private http: HttpClient,\n    private storage: Storage\n  ) { }\n\n  login(user : User) {\n    //console.log(user);\n    return this.http.post(`${this.AUTH_SERVER_ADDRESS}/auth/login`,\n      user\n    ).pipe(\n      tap(token => {\n        //this.storage.setItem('token', token)\n        this.storage.set('token', token)\n        .then(\n          () => {\n            console.log('Token Stored');\n          },\n          error => console.error('Error storing item', error)\n        );\n        this.token = token;\n        this.isLoggedIn = true;\n        return token;\n      }),\n    );\n  }\n\n  register(fName: String, lName: String, email: String, password: String) {\n    return this.http.post(`${this.AUTH_SERVER_ADDRESS}/auth/register`,\n      {first_name: fName, last_name: lName, email: email, password: password}\n    )\n  }\n\n  logout() {\n    console.log('Logout')\n    const headers = new HttpHeaders({\n      'Authorization': this.token[\"token_type\"] + \" \" + this.token[\"access_token\"]\n    });\n    return this.http.get(`${this.AUTH_SERVER_ADDRESS}/auth/logout`, { headers: headers })\n    .pipe(\n      tap(data => {\n        this.storage.remove(\"token\");\n        this.isLoggedIn = false;\n        delete this.token;\n        return data;\n      })\n    )\n  }\n\n  user() {\n    console.log('GET User Data');\n    const headers = new HttpHeaders({\n      'Authorization': this.token[\"token_type\"]+\" \"+this.token[\"access_token\"]\n    });\n    return this.http.get<User>(`${this.AUTH_SERVER_ADDRESS}/user`, { headers: headers })\n    .pipe(\n      tap(user => {\n        return user;\n      })\n    )\n  }\n\n  getToken() {\n    //return this.storage.getItem('token').then(\n    return this.storage.get('token').then(\n      data => {\n        this.token = data;\n        if(this.token != null) {\n          this.isLoggedIn=true;\n        } else {\n          this.isLoggedIn=false;\n        }\n      },\n      error => {\n        this.token = null;\n        this.isLoggedIn=false;\n      }\n    );\n  }\n}\n"],"sourceRoot":""}